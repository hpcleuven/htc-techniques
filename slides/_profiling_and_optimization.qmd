# Improving performance


## Where to start?

- Gut feeling?
- Best guess?
- Easy to optimize?

::: {.callout-tip .fragment}
To measure is to know: use a profiler
:::


## Profiling

- R has `Rprof` and `summaryRprof`
  - Easy to use
  - wrap around R script using `source`

::::: {.columns .fragment}
:::: {.column width=40%}
```{.r filename="rprof_wrapper.R"}
Rprof(interval=0.01)              # <1>
source("dgemm.R")                 # <2>
Rprof(NULL)                       # <3>
summaryRprof()                    # <4>
```

1. Start profiler
2. Run script to profile
3. Stop profiler
4. Show profile
::::
:::: {.column width=60% .fragment}
Run script with profiler
```bash
$ Rscript rprof_wrapper.R -p 1
```

::: {.callout-note .fragment}
Pass command line arguments
:::
::::
:::::


## Profile

```{.bash}
$ Rscript rprof_wrapper.R -p 1

                  self.time self.pct total.time total.pct
"rnorm"                0.81    54.36       0.81     54.36
"%*%"                  0.59    39.60       0.59     39.60
"matrix"               0.04     2.68       0.85     57.05
"lazyLoadDBfetch"      0.03     2.01       0.03      2.01
"frameTypes"           0.02     1.34       0.02      1.34
```

. . .

```{.bash}
$ Rscript rprof_wrapper.R -p 10

                  self.time self.pct total.time total.pct
"%*%"                  3.11    76.60       3.11     76.60
"rnorm"                0.86    21.18       0.86     21.18
"matrix"               0.05     1.23       0.91     22.41
"lazyLoadDBfetch"      0.02     0.49       0.02      0.49
"doTryCatch"           0.01     0.25       4.05     99.75
"as.list"              0.01     0.25       0.01      0.25
```

:::{.fragment}
Spot bottlenecks!
:::

::: notes
What to optimize depends on how the code is intended to be run.
For $p$ low, `rnorm` dominates, for $p$ larger, `%*%` dominates.
:::


## Code optimization: algorithm first!

- `%*%` pretty good, not much chance
- However, $A^p = A \cdot \cdots \cdot A$?
  - $p - 1$ multiplications

::: {.fragment}
Think in terms of the algorithm

$$
  A^{13} = A \cdot A^4 \cdot A^8
$$
:::

::: {.fragment}
Binary exponentiation: 5 versus 12 muliplications
:::

::: notes

Source code in dgemm_2exp.R

:::
